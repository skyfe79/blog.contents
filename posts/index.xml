<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Burt.K</title><link>https://blog.burt.pe.kr/posts/</link><description>Recent content in Posts on Burt.K</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><copyright>© Copyright Sungcheol Kim</copyright><lastBuildDate>Mon, 11 Nov 2019 23:39:57 +0900</lastBuildDate><atom:link href="https://blog.burt.pe.kr/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Awesome Python</title><link>https://blog.burt.pe.kr/posts/awesome-python/</link><pubDate>Mon, 11 Nov 2019 23:39:57 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/awesome-python/</guid><description>내가 쓰는 파이썬 모듈 모음 :)</description></item><item><title>Jetpack Compose 첫느낌</title><link>https://blog.burt.pe.kr/posts/the-first-impression-of-jetpack-compose/</link><pubDate>Sun, 10 Nov 2019 22:11:47 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/the-first-impression-of-jetpack-compose/</guid><description>Android Studio 4.0 Canary 1이 배포된 이후로 Jetpack Compose에 대한 내용이 하나둘씩 채워지고 있다. Jetpack Compose에 대한 공식 튜토리얼이 나와서 따라해 보았다.
Jetpack Compose 공식 튜토리얼 우선은 SwiftUI와 비슷하게 Compose로 구성한 앱을 시뮬레이터나 디바이스에 직접 심지 않고 미리 보기를 통해 레이아웃을 확인할 수 있다. 미리 보기를 위해서 @Preview 어노테이션을 제공한다. 단, @Preview로 설정한 함수는 매개변수를 받을 수 없다. 매개변수가 필요한 @Compose함수라면 임의의 매개변수를 제공하여 미리 보기 함수를 구성해야 한다.</description></item><item><title>Go 로컬 패지키 모듈</title><link>https://blog.burt.pe.kr/posts/local-package-with-go-module/</link><pubDate>Sun, 10 Nov 2019 17:35:24 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/local-package-with-go-module/</guid><description>Go modules를 사용하면 $GOPATH를 신경쓰지 않고 Go 프로젝트를 시작할 수 있습니다. 이미 오픈되어 있는 Go모듈을 사용할 경우에는 아래처럼 go.mod파일에 패키지의 주소와 버전을 기입하면 패키지를 모듈로 사용할 수 있습니다.
module star go 1.13 require ( github.com/fogleman/gg v1.3.0 github.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 // indirect golang.org/x/image v0.0.0-20191009234506-e7c1f5e7dbb8 // indirect ) 로컬패키지 그렇다면 로컬에 존재하는 패키지는 어떻게 go.mod파일에 기입할 수 있을까요? 아래와 같은 폴더 구조를 가지는 프로젝트를 생각해 보겠습니다.
hellogo ├── constants └── logics hellogo 폴더 하위에 모듈로 constants와 logics를 가지고 있습니다.</description></item><item><title>direvn로 $GOPATH 다루기</title><link>https://blog.burt.pe.kr/posts/handle-gopath-with-direnv/</link><pubDate>Sun, 10 Nov 2019 14:10:12 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/handle-gopath-with-direnv/</guid><description>Go언어를 아직 많이 사용해 본 것은 아니지만 go modules를 사용할 때 로컬 패키지 처리가 번거러운 것 같아서 $GOPATH를 다루는 쉬운 방법이 없을까 찾아 보았습니다. 그러던 중 direnv를 발견하여 관련 내용을 정리해 봅니다.
direnv direnv는 쉘의 환경 변수를 재정의하는 유틸리티입니다. Go언어는 $GOPATH를 워크스페이스마다 달리 설정해야 합니다. 하지만 매번 .bash_profile이나 .zshrc 같은 환경 파일을 편집해서 $GOPATH를 변경하는건 뭐랄까&amp;hellip; 음&amp;hellip;
파이썬에는 virtualenv같은 가상의 개발 환경을 만들어주는 도구가 존재하지만 Go언어는 그렇지 않습니다. 워크스페이스 폴더를 $GOPATH로 설정해 주어야 할 때 direnv를 사용하면 아주 편리합니다.</description></item><item><title>코틀린 코루틴 소개</title><link>https://blog.burt.pe.kr/posts/everything-you-need-to-know-about-kotlin-coroutines/</link><pubDate>Sun, 03 Nov 2019 23:50:17 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/everything-you-need-to-know-about-kotlin-coroutines/</guid><description>알림 이 글은 Everything you need to know about kotlin coroutines을 번역한 글임을 알려드립니다.
이 블로그 포스트의 목표는 다양한 코우틴 용어를 숙지하고 다음 질문에 답하는 것입니다.
Job과 Deferred, launch와 async의 차이점은 무엇인가? 어떤 코루틴 빌더를 사용해야 하는가? 코루틴에서 예외가 발생하면 어떻게 될까? 고수준의 구조화 된 동시성을 어떻게 만들 수 있을까? 변경 가능한 상태를 싱글스레드 디스패처를 사용해 스레드 안전하게 공유. 코루틴을 사용한 IO 및 CPU 바인딩 작업. 코루틴 작동 방식을 이해하고 실제 애플리케이션에서 효과적으로 사용하려면 핵심 개념을 먼저 이해해야 합니다.</description></item><item><title>Hello Go module, Goodbye GOPATH</title><link>https://blog.burt.pe.kr/posts/good-bye-gopath/</link><pubDate>Sat, 02 Nov 2019 20:14:00 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/good-bye-gopath/</guid><description>Go언어를 접하면서 $GOPATH를 설정하는 점이 약간 부담스러웠다. 그러나 1.13 이후 버전부터는 go module기능을 사용하여 $GOPATH이외의 위치에서 프로젝트를 생성할 수 있다.
시작하기 우선 프로젝트를 만들 폴더를 만든다. 예제로 AwesomeBin 폴더를 만들고 보자.
$ mkdir AwesomeBin $ cd AwesomeBin AwesomeBin 폴더에 진입한 다음에 우리가 만들 모듈의 이름. main package가 있는 곳이면 실행 파일의 이름으로 모듈을 초기화한다. awesome 실행파일이라고 가정해 보자.
$ go mod init awesome go: creating new go.mod: module awesome 그러면 go.</description></item><item><title>Hugo로 블로그 시작하기</title><link>https://blog.burt.pe.kr/posts/start-blog-with-hugo/</link><pubDate>Sat, 26 Oct 2019 13:57:42 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/start-blog-with-hugo/</guid><description>오랫동안 묵혀두었던 Jekyll 기반 블로그를 지우고 Hugo로 블로그를 열어 보았습니다. Hugo로 블로그를 개설할 때 다음 글에서 많은 도움을 받았습니다.
테마 Hugo 로 github 블로그 시작하기 TRAVIS CI 를 이용해서 HUGO 기반 웹사이트 배포 하기 Hosting a Hugo blog on GitHub Pages with Travis CI 블로그 구축기 2 Using Travis CI to publish to GitHub pages with custom domain 저처럼 Gtihub Page에 blog.burt.pe.kr 이라는 커스텀 도메인을 연결해 사용할 때, Travis-ci 로 배포를 하면 매번 커스텀 도메인 설정이 Reset되는 문제점이 있습니다.</description></item><item><title>디지털 비디오 기술 이해하기</title><link>https://blog.burt.pe.kr/posts/digital-video-tech/</link><pubDate>Fri, 01 Dec 2017 18:31:34 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/digital-video-tech/</guid><description>[001]
동영상 인코딩이 무엇이고 왜하고 어떻게 하는지 살펴 보겠습니다. [002]
강의 Github repo는 https://github.com/leandromoreira/digital_video_introduction 입니다. 제안해 주실 의견이 있다면 주십시오. 언제든지 환영합니다. 컴퓨터를 잘 알고 특히 오디오와 비디오에 대해 잘 아는 분에게는 처음 부분이 지루할 수 있습니다. 그러나 어느 부분에 이르면 반드시 도움이 될 내용을 찾을 수 있을 것입니다. [003]
시작해 봅시다. [004]
우리는 이미지를 단순한 2차원 정수 배열로 볼 수 있습니다. 회색인 경우 1개의 평면만 필요하고 컬러인 경우 더 많은 평면을 사용해 3차원 배열을 만듭니다.</description></item><item><title>OOP와 POP(Protocol Oriented Programming)</title><link>https://blog.burt.pe.kr/posts/protocol-oriented-programming/</link><pubDate>Thu, 18 May 2017 19:03:14 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/protocol-oriented-programming/</guid><description>Swift 2.0 출시 이후, 스위프트 개발자들 사이에서 POP가 화두가 되어 왔습니다. POP는 Protocol Oriented Programming 약자입니다. OOP는 Object Oriented Programming 약자입니다. POP는 뜻 그대로 프로토콜 중심 프로그래밍이고 OOP는 객체 중심 프로그래밍입니다. POP와 OOP 차이가 무엇일까요? 차이가 무엇이길래 개발자들 사이에서 화두가 되고 있을까요?
답을 생각해 보기 전에 OOP의 핵심이 무엇인지 알아야 합니다. OOP 핵심은 상속입니다. 상속을 통해 타입을 확장합니다. 하지만 여러 객체로부터 상속해야 할 경우 많은 문제가 발생합니다. 단일 상속이어도 클래스 상속 계층이 깊어질수록 문제가 커집니다.</description></item><item><title>A* 데모 프로그램</title><link>https://blog.burt.pe.kr/posts/astar-story/</link><pubDate>Sat, 23 Jan 2010 18:19:21 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/astar-story/</guid><description>알림 이 글은 제 네이버 블로그 에서 아카이빙을 위해 가져온 글입니다. 그 당시 svn 같은 소스 관리툴을 사용하지 않아서 코드 히스토리를 남기지 못한게 아쉽네요.
github https://github.com/skyfe79/AStar
J모 게임 회사에 면접을 볼 때 만들었던 Astar 데모 프로그램. 다른 회사에 오긴 했지만 만들면서 꽤 재미있는 시간을 보낸 기억이&amp;hellip; 지금은 HPA* HAA* 등을 공부하면서 항상 개선점이 발생하고 해결하면서 멋진 솔루션이 탄생함을 깨닫는다. 이런 개선점과 해결방법을 고민하는 자세를 가져야겠다.</description></item><item><title>SGL:소프트웨어 3D 렌러러 이야기</title><link>https://blog.burt.pe.kr/posts/sgl-story/</link><pubDate>Tue, 01 Dec 2009 18:10:13 +0900</pubDate><guid>https://blog.burt.pe.kr/posts/sgl-story/</guid><description>알림 이 글은 제 네이버 블로그 에서 아카이빙을 위해 가져온 글입니다. 그 당시 svn 같은 소스 관리툴을 사용하지 않아서 코드 히스토리를 남기지 못한게 아쉽네요.
github https://github.com/skyfe79/SGL
소프트웨어렌더러를 만들어 보자고 생각한 건 1년 전 쯤이었습니다. 게임 엔진 개발자를 꿈꾸는 저에게 소프트웨어 렌더러는 반드시 넘어야 할 첫 관문이라고 여겼기 때문이죠. 1년여의 시간동안 시간날 때마다 틈틈히 만들어 온 것이 구현하고자 했던 목표를 다 구현하게 되었습니다. 1년동안 프로젝트를 하면서 많은 정이 든 프로젝트이고 (도대체 갈아 엎기를 몇 번 ?</description></item></channel></rss>